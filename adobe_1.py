# -*- coding: utf-8 -*-
"""Adobe_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nSz4SCIxeQn_mzCQWuE_zqXz6bWCdO9T
"""

import cv2
from google.colab.patches import cv2_imshow

# Read and resize the image
padam = cv2.imread("/content/Screenshot (315).png")
padam = cv2.resize(padam, (1200, 1000))

# Convert the image to grayscale
gray_image = cv2.cvtColor(padam, cv2.COLOR_BGR2GRAY)

# Apply Canny edge detection
edges = cv2.Canny(gray_image, threshold1=100, threshold2=200)

# Find contours in the image
contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Initialize a list to store detected shapes
detected_shapes = []

# Loop through each contour and identify shapes
for contour in contours:
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.04 * perimeter, True)
    num_vertices = len(approx)

    # Classify shapes based on the number of vertices
    if num_vertices == 3:
        shape_name = "Triangle"
    elif num_vertices == 4:
        shape_name = "Rectangle"
    elif num_vertices == 5:
        shape_name = "Pentagon"
    elif num_vertices == 6:
        shape_name = "Hexagon"
    else:
        shape_name = "Circle"

    # Draw the shape name on the image
    x, y = approx.ravel()[0], approx.ravel()[1]
    cv2.putText(padam, shape_name, (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

    # Store the detected shape in the list
    detected_shapes.append(shape_name)

# Display the image with recognized shapes
cv2_imshow(padam)

# Print the detected shapes
print("Shapes recognized:", detected_shapes)

